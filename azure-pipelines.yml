trigger:
- master

pool:
  name: selfhostedagent
  demands:
    - agent.name -equals agent1

stages:
  - stage: CodeCompile
    displayName: 'Code Compile'
    jobs:
      - job:
        steps:
          - task: Maven@4
            inputs:
              azureSubscription: 'serviceconn'
              mavenPomFile: 'pom.xml'
              goals: 'compile'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              javaHomeOption: 'JDKVersion'
              mavenVersionOption: 'Default'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false
  - stage: codeTest
    displayName: 'Code Test'
    jobs:
      - job:
        steps:
          - task: Maven@4
            inputs:
              azureSubscription: 'serviceconn'
              mavenPomFile: 'pom.xml'
              goals: 'test'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              javaHomeOption: 'JDKVersion'
              mavenVersionOption: 'Default'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false
  - stage: trivyScan
    displayName: 'Trivy Scan'
    jobs:
      - job:
        steps:
          - task: CmdLine@2
            inputs:
              script: 'trivy fs --format table -o fs.html .'
  - stage: SonarqubeCode
    displayName: 'SonarQubeCodeAnalysis'
    jobs:
      - job:
        steps:
          - task: SonarQubePrepare@7
            inputs:
              SonarQube: 'sonarconn1'
              scannerMode: 'cli'
              configMode: 'manual'
              cliProjectKey: 'SecretsantaWeb'
              cliProjectName: 'SecretsantaWeb'
              cliSources: '.'
              extraProperties: 'sonar.java.binaries=.'
          - task: SonarQubeAnalyze@7
            inputs:
              jdkversion: 'JAVA_HOME_17_X64'
          - task: SonarQubePublish@7
            inputs:
              pollingTimeoutSec: '300'
  - stage: Artifact
    displayName: 'Artifact Deploy'
    jobs:
      - job: Artifact
        steps:
          - task: Maven@4
            inputs:
              azureSubscription: 'serviceconn'
              mavenPomFile: 'pom.xml'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              javaHomeOption: 'JDKVersion'
              mavenVersionOption: 'Default'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false
          - task: MavenAuthenticate@0
            inputs:
              artifactsFeeds: 'newartifcatSecretWeb'
              mavenServiceConnections: 'mavenauth'
          - task: Maven@4
            inputs:
              azureSubscription: 'serviceconn'
              mavenPomFile: 'pom.xml'
              goals: 'deploy'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              javaHomeOption: 'JDKVersion'
              mavenVersionOption: 'Default'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false
  - stage: dockerbuild
    displayName: 'Docker Build'
    jobs:
      - job: dockerbuild
        steps:
          - task: CmdLine@2
            inputs:
              script: 'mvn clean package'
          - task: Docker@2
            inputs:
              containerRegistry: 'dockerconn'
              repository: 'dev'
              command: 'build'
              Dockerfile: '**/Dockerfile'
              tags: 'latest'
  - stage: docker_images_scan
    displayName: 'Docker Images Scan'
    jobs:
      - job:
        steps:
          - task: CmdLine@2
            inputs:
              script: 'trivy image --format table -o dockerimages.html secretsantaweb.azurecr.io/dev:latest'
  - stage: dockerpush
    displayName: 'Docker Push'
    jobs:
      - job: dockerpush
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: 'dockerconn'
              repository: 'dev'
              command: 'push'
              tags: 'latest'
  - stage: push_to_Aks
    displayName: 'Deploy in Aks'
    jobs:
      - job: push_to_Aks
        steps:
          - task: KubernetesManifest@1
            inputs:
              action: 'deploy'
              connectionType: 'kubernetesServiceConnection'
              kubernetesServiceConnection: 'k8s-conn'
              manifests: 'deploymentservice.yml'